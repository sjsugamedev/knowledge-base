[{"D:\\Projects\\Website\\knowledge-base\\src\\index.js":"1","D:\\Projects\\Website\\knowledge-base\\src\\route.js":"2","D:\\Projects\\Website\\knowledge-base\\src\\pages\\About.js":"3","D:\\Projects\\Website\\knowledge-base\\src\\pages\\Home.js":"4","D:\\Projects\\Website\\knowledge-base\\src\\pages\\articles\\Article_02_01132021.js":"5","D:\\Projects\\Website\\knowledge-base\\src\\pages\\articles\\Article01.js":"6","D:\\Projects\\Website\\knowledge-base\\src\\pages\\articles\\Article_03_02092021.js":"7"},{"size":377,"mtime":1611706512811,"results":"8","hashOfConfig":"9"},{"size":1170,"mtime":1613244837828,"results":"10","hashOfConfig":"9"},{"size":5885,"mtime":1611706756132,"results":"11","hashOfConfig":"9"},{"size":4243,"mtime":1613246686371,"results":"12","hashOfConfig":"9"},{"size":32242,"mtime":1613244833222,"results":"13","hashOfConfig":"9"},{"size":6180,"mtime":1613244833220,"results":"14","hashOfConfig":"9"},{"size":13469,"mtime":1613246239805,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ukmsc",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Projects\\Website\\knowledge-base\\src\\index.js",[],["32","33"],"D:\\Projects\\Website\\knowledge-base\\src\\route.js",[],"D:\\Projects\\Website\\knowledge-base\\src\\pages\\About.js",[],"D:\\Projects\\Website\\knowledge-base\\src\\pages\\Home.js",["34","35"],"D:\\Projects\\Website\\knowledge-base\\src\\pages\\articles\\Article_02_01132021.js",["36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55"],"import React from 'react';\r\nimport \"../css/Articles.css\";\r\nimport { IoMdReturnLeft, IoMdArrowUp } from \"react-icons/io\";\r\nimport HeroImg2 from \"./img/article_02/img_article02_cover_2.png\";\r\nimport img01 from \"./img/article_02/img_article02_01.jpg\";\r\nimport img02 from \"./img/article_02/img_article02_02.jpg\";\r\nimport img03 from \"./img/article_02/img_article02_03.jpg\";\r\nimport img04 from \"./img/article_02/img_article02_04.jpg\";\r\nimport img05 from \"./img/article_02/img_article02_05.jpg\";\r\nimport img06 from \"./img/article_02/img_article02_06.jpg\";\r\nimport img07 from \"./img/article_02/img_article02_07.jpg\";\r\nimport img08 from \"./img/article_02/img_article02_08.jpg\";\r\nimport img09 from \"./img/article_02/img_article02_09.jpg\";\r\nimport img10 from \"./img/article_02/img_article02_10.jpg\";\r\nimport img11 from \"./img/article_02/img_article02_11.jpg\";\r\nimport img12 from \"./img/article_02/img_article02_12.jpg\";\r\nimport img13 from \"./img/article_02/img_article02_13.jpg\";\r\nimport pdf from './download/Using git without the command line.pdf';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Article() {\r\n  function scrollTo(str) {\r\n    // console.log(str);\r\n    if(document.querySelector(str)){\r\n      document.querySelector(str).scrollIntoView();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"article-page\">\r\n      <div className=\"navbar\">\r\n        <div className=\"navbar-header\">\r\n          <Link className=\"navbar-title\" to=\"/\">\r\n            Knowledge Base\r\n          </Link>\r\n        </div>\r\n        <div className=\"navbar-collapse\">\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n              <a href=\"https://sjsugamedev.com/\">GameDev</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"article-go-top\">\r\n        <i onClick={()=>{window.scrollTo(0,0)}}><IoMdArrowUp/></i>\r\n      </div>\r\n\r\n      <div className=\"page-body\">\r\n        <div className=\"page-grid\">\r\n          <div className=\"left\">\r\n            <div className=\"content\">\r\n              <div className=\"back\">\r\n                <a className=\"back-text\" href=\"/\">\r\n                  Back to Articles\r\n                </a>\r\n                <a className=\"back-icon\" href=\"/\">\r\n                  <IoMdReturnLeft />\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"center\">\r\n            <div className=\"article\">\r\n              <div className=\"hero-img\">\r\n                <img src={HeroImg2}></img>\r\n              </div>\r\n              <div className=\"article-container\">\r\n                <div className=\"article-header\">\r\n                  <h1 className=\"article-title\" id=\"tc-title\">\r\n                    Using git without the command line\r\n                  </h1>\r\n                  <div className=\"author-n-date\">\r\n                    <h3>Cole Pergerson</h3>\r\n                    <h3>Date 01/27/2021</h3>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"article-text\">\r\n                  <p className=\"p-indent\">\r\n                    This is a guide on how to use git without touching the\r\n                    command line. Basically you’ll be pressing buttons instead\r\n                    of writing commands. This guide was created to promote the\r\n                    use of git for version and source code control while also\r\n                    providing an easy alternative to the command line.\r\n                  </p>\r\n                  <p>\r\n                    Please note that if you’re planning to go into an industry\r\n                    that uses git, then we highly recommend that you learn how\r\n                    to use git in the command line as it will give you a more\r\n                    complete understanding of the tool.\r\n                  </p>\r\n                  <p>\r\n                    Below is the list of tools that will be covered. This list\r\n                    isn’t exhaustive as there are alternatives to each of these\r\n                    tools.\r\n                  </p>\r\n                  <p>\r\n                    <u>GitHub Desktop</u>\r\n                    <br></br>A friendly UI that provides a visual process for\r\n                    most of the git commands. Documentation:\r\n                    <a href=\"https://docs.github.com/en/desktop\" target=\"_blank\"> https://docs.github.com/en/desktop</a>\r\n                    \r\n                  </p>\r\n                  <p>\r\n                    <u>Visual Code (or Atom)</u>\r\n                    <br></br>A lightweight code editor that has visual merge\r\n                    conflict tools. If GitHub Desktop encounters a merge\r\n                    conflict, then you can open the conflicted file with Visual\r\n                    Code and resolve conflicts. Documentation:\r\n                    <a href=\"https://code.visualstudio.com/docs/editor/versioncontrol\" target=\"_blank\"> https://code.visualstudio.com/docs/editor/versioncontrol</a>\r\n                    \r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"article-text\">\r\n                  <h2 className=\"article-heading\" id=\"setup\">Setup</h2>\r\n                  <p className=\"p-indent\">\r\n                    Install GitHub Desktop and Visual Code. Make sure that the\r\n                    editor for GitHub Desktop is set to Visual Code. \r\n                    <a href=\"https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/configuring-a-default-editor\" target=\"_blank\"> Click here\r\n                    for help</a>\r\n                    \r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"article-text\">\r\n                  <h2 className=\"article-heading\" id=\"tc-using-github-desktop\">Using GitHub Desktop</h2>\r\n                  <h3 className=\"article-heading\">What is Git and GitHub?</h3>\r\n                  <p className=\"p-indent\">\r\n                    Git is a version control tool, meaning that it keeps track\r\n                    of all the versions of your project. At any time, you can\r\n                    restore older parts of your project if you break your\r\n                    current version. GitHub is a site that will allow you to\r\n                    upload your git project to their cloud servers. Your code\r\n                    will be online and others can collaborate with you remotely.\r\n                    When you download GitHub Desktop, it will automatically\r\n                    download git on to your computer.\r\n                  </p>\r\n                  <p>\r\n                  \r\n                    Git:<a href=\"https://git-scm.com/\" target=\"_blank\"> https://git-scm.com/</a>\r\n                    <br></br>                    \r\n                    GitHub:<a href=\"https://github.com/features\" target=\"_blank\"> https://github.com/features</a>\r\n                  </p>\r\n                  <p>\r\n                    There are some git concepts that you should know. Commits\r\n                    are the different versions of your project. It’s up to you\r\n                    how many updates a single commit will have, you'll know more\r\n                    about that later. Whenever you see “Commit your changes,”\r\n                    that means creating a commit. Git allows other people to\r\n                    work together on the same project using branches. These are\r\n                    separate safe zones that can be created and worked in\r\n                    without affecting other branches. Each branch contains their\r\n                    own commits and to get commits from another branch, you’ll\r\n                    need to merge the branches.\r\n                  </p>\r\n                  <p>\r\n                    GitHub has some concepts that may be confusing. First,\r\n                    projects are called repositories. Pushing means uploading\r\n                    and Pulling means downloading. The Origin means the\r\n                    repository stored in the cloud. You will be pulling commits\r\n                    from the origin and pushing your commits to the origin.\r\n                  </p>\r\n                  <h3 className=\"article-heading\" id=\"tc-im-the-host\">\r\n                    I’m the host of the project\r\n                  </h3>\r\n                  <p>\r\n                    Whoever has started the project will need to upload the\r\n                    files to GitHub. You can do this through the desktop\r\n                    application via two ways\r\n                    <ol>\r\n                      <li>\r\n                        <p>\r\n                          Make the local repository, then save the project file\r\n                          the repo file location.\r\n                        </p>\r\n                      </li>\r\n                      <li>\r\n                        <p>\r\n                          Make the project first, then create the local\r\n                          repository.\r\n                        </p>\r\n                      </li>\r\n                    </ol>\r\n                  </p>\r\n                  <p>\r\n                    Click File → New repository. A window will appear where you\r\n                    can name your repo and choose your local installation\r\n                    location. Look to see if there is a .gitignore file for your\r\n                    editor. There is one for Unity and Unreal. The .gitignore\r\n                    tells git to ignore files that don’t need to be shared to\r\n                    other users and makes collaborating easier.\r\n                  </p>\r\n                  <p>\r\n                    If you followed process 1, then go to your editor and save\r\n                    your project to the newly created repo folder. If you\r\n                    followed process 2, then drag your project file into the\r\n                    repo folder.\r\n                  </p>\r\n                  <p>\r\n                    Once those steps are created, you should see changes recorded\r\n                    in GitHub Desktop (Fig. 2). If you’re using Unity, check\r\n                    “Note for Unity” below first. When you’re ready, write a\r\n                    summary of the changes, “Uploaded project” is fine. Then\r\n                    press commit changes.\r\n                  </p>\r\n                  <p>\r\n                    Note for Unity<br></br>\r\n                    There are two things to know.\r\n                  </p>\r\n                  <p>\r\n                    First, make sure the whole team is using the same version of\r\n                    Unity. If you all have different versions, then you’ll\r\n                    experience issues in Git syncing.\r\n                  </p>\r\n                  <p>\r\n                    Second, the default gitignore for Unity usually doesn’t\r\n                    work. If your project is stored in a subfolder in the repo\r\n                    folder, then GitHub Desktop will most likely show over a 100\r\n                    changes (Fig. 1). Since this is a new project, you should\r\n                    have less than 30 changes (Fig. 2). This is because your\r\n                    .gitignore is assuming the project is in the root folder,\r\n                    not in a folder within the root folder. Edit the .gitignore\r\n                    by removing the ‘/’ in front of the file directories listed\r\n                    at the top of the file. See images below\r\n                  </p>\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img01}></img>\r\n                    <p className=\"img-sub-text\">Figure 1</p>\r\n                  </div>\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img13}></img>\r\n                  </div>\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img02}></img>\r\n                    <p className=\"img-sub-text\">Figure 2</p>\r\n                  </div>\r\n\r\n                  <p>\r\n                    <u>Publishing Repo</u>\r\n                    <br></br>\r\n                    Now publish the repository if you haven’t done it already.\r\n                    You should see that option as one of the buttons on the top.\r\n                    Once you publish the repo, you might have another option\r\n                    called “Push Origin.” Go ahead and press that too, look at\r\n                    the “Uploading Changes” section below for more details on\r\n                    that.\r\n                  </p>\r\n                  \r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img03}></img>\r\n                  </div>\r\n\r\n                  <p>\r\n                    This requires that you have a GitHub account. \r\n                    <a target=\"blank\" href=\"https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/authenticating-to-github\"> Click here for\r\n                    help</a>\r\n                    \r\n                  </p>\r\n                  <p>\r\n                    <u>Inviting your team to collaborate</u>\r\n                    <br></br>\r\n                    It’s important that everyone who will be collaborating on\r\n                    this project has a GitHub account. The repo that you have\r\n                    created is hosted on GitHub which takes care of the online\r\n                    syncing. The next important thing is that each member is\r\n                    invited to collaborate on the project. Anyone can download\r\n                    the repository you have uploaded, but they don’t have\r\n                    permission to make edits until they are official\r\n                    collaborators\r\n                  </p>\r\n\r\n                  \r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img04}></img>\r\n                    <p className=\"img-sub-text\">Figure 3</p>\r\n                  </div>\r\n\r\n\r\n                  <p>\r\n                    This is the setting page of a GitHub repo (Fig. 3). Under\r\n                    ‘Manage access,’ you can see there are three collaborators\r\n                    for this project, and only these three people and the repo\r\n                    owner can make edits.\r\n                  </p>\r\n                  <p>\r\n                    A <b>common problem</b> is that the repo owner will forget\r\n                    to invite someone and then a team member will try to add\r\n                    their changes. They will be prompted with a window asking if\r\n                    they would like to create a fork which is basically an\r\n                    exact, but separate, clone of the repo. This is super\r\n                    confusing for anyone not familiar with GitHub, but luckily\r\n                    it’s an easy problem to fix.\r\n                  </p>\r\n                  <h3 className=\"article-heading\" id=\"tc-im-joining\">\r\n                    I’m trying to join the project\r\n                  </h3>\r\n                  <p>\r\n                    If you haven’t already, create a GitHub account. Send your\r\n                    GitHub username to whoever is the host of the project. It’s\r\n                    very important that you’re a collaborator of the GitHub\r\n                    repository. GitHub is a site that hosts projects that are\r\n                    using git for version and source code control. A repository\r\n                    is the name of a project hosted on GitHub. There are\r\n                    millions of public repositories on GitHub that you can view\r\n                    and download, but you can’t make edits to them unless you're\r\n                    a collaborator from them. The repo host must invite you to\r\n                    be a collaborator, otherwise, when you try to make edits,\r\n                    GitHub desktop will say you don’t have permission and will\r\n                    ask you to create a fork.\r\n                    <b>Don’t create a fork</b>, a fork is an exact, but\r\n                    separate, verison of the repo. Basically, you’ll be making\r\n                    changes to the wrong project!\r\n                  </p>\r\n                  <p>\r\n                    To download a version of the project, you’ll need to clone\r\n                    the project. When you see or hear clone, just think of\r\n                    downloading the project.\r\n                  </p>\r\n                  <p>\r\n                    There are two ways to do this.<br></br>\r\n                    <a target=\"blank\" href=\"https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/cloning-and-forking-repositories-from-github-desktop\"> Clone from GitHub desktop</a>\r\n                    <br></br>\r\n                    <a target=\"blank\" href=\"https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/cloning-a-repository-from-github-to-github-desktop\"> Clone from GitHub.com</a>\r\n                  </p>\r\n                  <p>\r\n                    Clone the project, choose where you want to store it, and\r\n                    then open the project.\r\n                  </p>\r\n                  <h3 className=\"article-heading\" id=\"tc-uploading\">Uploading Changes</h3>\r\n                  <p>\r\n                    Git automatically your records changes and GitHub Desktop\r\n                    will list them under the Changes tab. In Figure 4, there are\r\n                    26 changes that git sees. You can simply commit these\r\n                    changes, which is git's way of saying that these changes are\r\n                    good and ready to be sent to everyone else. To commit,\r\n                    simply add a comment and press the blue button at the\r\n                    button. <a target=\"blank\" href=\"https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/committing-and-reviewing-changes-to-your-project\">\r\n                    Click here for a more detailed explanation.</a> Then you have one more step, which is to push those changes.\r\n                  </p>\r\n\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img05}></img>\r\n                    <p className=\"img-sub-text\">Figure 4</p>\r\n                  </div>\r\n\r\n                  <p>\r\n                    Pushing changes will upload them to the GitHub repo for\r\n                    everyone else to download. Once you committed, you should\r\n                    see a button at the top that will say “Push Origin.” There\r\n                    will be number in that button which will tell you how many\r\n                    commits you’ll be pushing. Simply push the Push button to\r\n                    share your changes.\r\n                  </p>\r\n\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img06}></img>\r\n                  </div>\r\n\r\n                  <h3 className=\"article-heading\" id=\"tc-working-with-others\">Working with others</h3>\r\n                  <p>\r\n                    You now know how to upload changes, but how do you upload\r\n                    changes that don’t conflict with your teammate’s work? This\r\n                    scenario is definitely possible and could lead to loss of\r\n                    work and time trying to resolve git conflicts. That is why\r\n                    you must use branches!\r\n                  </p>\r\n                  <p>\r\n                    <u>Setting up a branch</u>\r\n                    <br></br>\r\n                    Branches are like seperate spaces with the repo that you can\r\n                    freely edit from the main project. In fact, the main project\r\n                    is a branch! It is called master and that is the root of the\r\n                    project. It’s a best practice to have everyone one there own\r\n                    branches and then merge those changes to master. This way\r\n                    each member doesn’t have to worry about messing with other\r\n                    people's changes and if there is a conflict, it happens at\r\n                    one place independent of all the other branches. This way\r\n                    you won’t lose work by bringing changes together.\r\n                  </p>\r\n                  <p>\r\n                    <a target=\"blank\" href=\"https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/managing-branches\">Click here for a detailed guide to branches.</a>\r\n                  </p>\r\n                  <h3 className=\"article-heading\" id=\"tc-merging-changes\">Merging changes</h3>\r\n                  <p>\r\n                    Once everyone is working on their own branch, there will be\r\n                    a point where all those changes need to come together to\r\n                    update the game. You can bring changes from one branch into\r\n                    another by merging them.\r\n                  </p>\r\n                  <p>\r\n                    <u>Merging branches</u>\r\n                    <br></br>\r\n                    Select the branch that you want to bring changes into. Goto\r\n                    Branch → ‘Merge into current branch…’ A window will appear\r\n                  </p>\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img07}></img>\r\n                    <p className=\"img-sub-text\">Figure 5</p>\r\n                  </div>\r\n                  <p>\r\n                    In figure 5, my selected branch is master, the main project,\r\n                    which has a check mark next to it. Here I want to bring the\r\n                    changes from the coding branch into master to update the\r\n                    game. As you can see at the bottom, GitHub Desktop is\r\n                    telling me exactly what this operation is going to do. “This\r\n                    will merge 65 commits from code into master.” It is really\r\n                    important that you read and trust what is said before\r\n                    merging. Click merge, it is that easy!\r\n                  </p>\r\n                  <p>\r\n                    <a target=\"blank\" href=\"https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/syncing-your-branch\">Click here for a, somewhat, detailed guide to merging.</a>\r\n                  </p>\r\n                  <p>\r\n                    <u>Resolving merge conflicts in GitHub Desktop</u>\r\n                    <br></br>\r\n                    Sometimes it isn’t very easy because there may be merge\r\n                    conflicts. You’ll know because GitHub Desktop will tell you\r\n                    beforehand (Fig. 6).\r\n                  </p>\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img08}></img>\r\n                    <p className=\"img-sub-text\">Figure 6</p>\r\n                  </div>\r\n\r\n                  <p>Everything is fine..O_O</p>\r\n                  <p>\r\n                    Click merge the button, don’t worry, you can abort the merge\r\n                    at any time. Another window will appear detailing all the\r\n                    merge conflicts (Fig. 7). As you can see, the commit merge\r\n                    button is greyed out but the abort merge is readily\r\n                    available to be pressed. Merge conflicts are conflicts in\r\n                    the file that git has decided that it is best for us,\r\n                    humans, to resolve. In this case, there is only one issue\r\n                    that needs to be fixed. There is an option to open in Visual\r\n                    Studio, but that will be explained later in this document.\r\n                    Instead, we will solve this using GitHub desktop by clicking\r\n                    the arrow point down. There will be some options, but the\r\n                    two bottom ones are what we will be focusing on. Use the\r\n                    modified changes from X or you use the modified changes from\r\n                    Y. X and Y are the two branches involved in this conflict.\r\n                    Basically, do you want to override the conflict with your\r\n                    changes or with their changes. It’s one or the other, and in\r\n                    most cases, this is the easiest and best choice to make. Of\r\n                    course you have to sacrifice someone’s work, which in most\r\n                    cases, isn’t too bad.\r\n                  </p>\r\n\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img09}></img>\r\n                    <p className=\"img-sub-text\">Figure 7</p>\r\n                  </div>\r\n\r\n                  <h3 className=\"article-heading\" id=\"tc-using-vs\">\r\n                    Using Visual Code to solve merge conflicts\r\n                  </h3>\r\n                  <p>\r\n                    Let’s come back to this example. As you can see (Fig. 8),\r\n                    one of the options is to “Open in Visual Studio Code.” Go\r\n                    ahead and press the button, Visual Studio Code will open up.\r\n                    Usually Visual Code will detect git in the system and open\r\n                    the conflicted file.\r\n                  </p>\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img09}></img>\r\n                    <p className=\"img-sub-text\">Figure 8</p>\r\n                  </div>\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img10}></img>\r\n                    <p className=\"img-sub-text\">Figure 9</p>\r\n                  </div>\r\n     \r\n                  <p>\r\n                    You should see the conflicted file once it opens and on the\r\n                    left, you’ll see a branch symbol (Fig. 9). Click that and\r\n                    the source control window will open up.\r\n                  </p>\r\n                  <p>\r\n                    In Visual Studio Code, you’ll have all the same options in\r\n                    GitHub Desktop plus some more helpful tools which I will\r\n                    show you.\r\n                  </p>\r\n                  <p>\r\n                    You can right click any of the files and resolve the\r\n                    conflict by selecting the incoming changes or the current\r\n                    ones (Fig. 10)\r\n                  </p>\r\n\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img11}></img>\r\n                    <p className=\"img-sub-text\">Figure 10</p>\r\n                  </div>\r\n\r\n                  <p>\r\n                    Another way to resolve conflicts is by going directly in the\r\n                    code. In this example, I have a conflict at the variable\r\n                    speed (Fig. 11).\r\n                  </p>\r\n\r\n                  <div className=\"article-img\">\r\n                    <img className=\"img-full\" src={img12}></img>\r\n                    <p className=\"img-sub-text\">Figure 11</p>\r\n                  </div>\r\n\r\n                  <p>\r\n                    The green code is the current changes, the changes on the\r\n                    current branch. The blue code is the incoming change, the\r\n                    changes from the other branch. I can either click the\r\n                    buttons on the top, or I can directly edit the code. When\r\n                    there is a merge conflict, Git adds the code from both\r\n                    branches into the conflicted files and separates them with\r\n                    the '&lt&lt&lt' and “===” symbols. Visual Studio is handy\r\n                    because it will highlight them to make them easier to find.\r\n                    In some cases, you might want both branch changes so\r\n                    directly editing the code would be the best option.\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"article-text\">\r\n                  <h2 className=\"article-heading\" id=\"tc-best-practices\">Our Best Practices</h2>\r\n                  <h3 className=\"article-heading\">Learn git command line :)</h3>\r\n                  <p>\r\n                    I highly recommend learning git command line because that\r\n                    will give you a better understanding of everything I went\r\n                    over. If not, you always will be limited to the option of\r\n                    GitHub Desktop and you’ll be hopeless in any deveasting\r\n                    merge conflicts (this is rare, but happens). Assuming you’re\r\n                    a student at San Jose State University, you have free access\r\n                    to Lynda.com with your library card. There are some great\r\n                    courses on that site that cover git command line and you’ll\r\n                    be more confident in using Git after watching them.\r\n                  </p>\r\n                  <h3 className=\"article-heading\">Branches</h3>\r\n                  <p>\r\n                    Work in separate branches! You can either name your branches\r\n                    after your teammate names or discipline. It’s best, however,\r\n                    to name them after features or parts of your game. Usually I\r\n                    use a mixture of these. I might have the player branch,\r\n                    which is for player related code, and then I’ll have the art\r\n                    branch, where my artist can upload all of their assets to.\r\n                    It really depends on what is best for your team.\r\n                  </p>\r\n                  <p>\r\n                    Always keep the master branch working! When it comes to\r\n                    merging everyone’s changes together, don’t merge them into\r\n                    master yet. Have a separate branch for that where you can\r\n                    merge all the changes at once, resolve any conflicts, and\r\n                    then merge that branch into master. By keeping the master\r\n                    branch clean. You’ll always have, ideally, a playable game\r\n                    that you could send off for playtesting.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"right\">\r\n            <div className=\"content\">\r\n              <div className=\"print-menu\">\r\n                <a className=\"print-link\" href={pdf} target=\"_blank\" rel=\"noreferrer\">\r\n                  Download Article\r\n                </a>\r\n                <hr className=\"line\"></hr>\r\n                <a className=\"article-types\" href=\"/\">\r\n                  tutorials\r\n                </a>\r\n                <p className=\"article-tags\"> Tags: #tag #tag #tag #tag #tag</p>\r\n                <div className=\"table-of-content\">\r\n                  <p>Table of Content:</p>\r\n                  <ul>\r\n                    <li onClick={()=>{scrollTo(\"#tc-title\")}}><p>Title</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-setup\")}}><p>Setup</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-using-github-desktop\")}}><p>Using GitHub Desktop</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-im-the-host\")}}><p>I'm the host of the project</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-im-joining\")}}><p>I'm tying to join the project</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-uploading\")}}><p>Uploading changes</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-working-with-others\")}}><p>Working with others</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-merging-changes\")}}><p>Merging changes</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-using-vs\")}}><p>Using Visual Code to solve merges</p></li>\r\n                    <li onClick={()=>{scrollTo(\"#tc-best-practices\")}}><p>Best practices for git</p></li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Article;\r\n","D:\\Projects\\Website\\knowledge-base\\src\\pages\\articles\\Article01.js",["56","57"],"D:\\Projects\\Website\\knowledge-base\\src\\pages\\articles\\Article_03_02092021.js",["58","59","60","61","62","63","64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":15},{"ruleId":"74","severity":1,"message":"75","line":31,"column":46,"nodeType":"76","messageId":"77","endLine":31,"endColumn":47},{"ruleId":"78","severity":1,"message":"79","line":71,"column":17,"nodeType":"80","endLine":71,"endColumn":37},{"ruleId":"81","severity":1,"message":"82","line":107,"column":21,"nodeType":"80","endLine":107,"endColumn":82},{"ruleId":"81","severity":1,"message":"82","line":116,"column":21,"nodeType":"80","endLine":116,"endColumn":104},{"ruleId":"81","severity":1,"message":"82","line":126,"column":21,"nodeType":"80","endLine":126,"endColumn":153},{"ruleId":"81","severity":1,"message":"82","line":147,"column":25,"nodeType":"80","endLine":147,"endColumn":72},{"ruleId":"81","severity":1,"message":"82","line":149,"column":28,"nodeType":"80","endLine":149,"endColumn":82},{"ruleId":"78","severity":1,"message":"79","line":234,"column":21,"nodeType":"80","endLine":234,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":238,"column":21,"nodeType":"80","endLine":238,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":241,"column":21,"nodeType":"80","endLine":241,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":257,"column":21,"nodeType":"80","endLine":257,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":281,"column":21,"nodeType":"80","endLine":281,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":349,"column":21,"nodeType":"80","endLine":349,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":363,"column":21,"nodeType":"80","endLine":363,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":404,"column":21,"nodeType":"80","endLine":404,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":428,"column":21,"nodeType":"80","endLine":428,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":456,"column":21,"nodeType":"80","endLine":456,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":471,"column":21,"nodeType":"80","endLine":471,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":475,"column":21,"nodeType":"80","endLine":475,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":496,"column":21,"nodeType":"80","endLine":496,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":507,"column":21,"nodeType":"80","endLine":507,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":54,"column":17,"nodeType":"80","endLine":54,"endColumn":36},{"ruleId":"78","severity":1,"message":"79","line":105,"column":19,"nodeType":"80","endLine":105,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":64,"column":17,"nodeType":"80","endLine":64,"endColumn":37},{"ruleId":"81","severity":1,"message":"82","line":93,"column":158,"nodeType":"80","endLine":93,"endColumn":256},{"ruleId":"78","severity":1,"message":"79","line":105,"column":21,"nodeType":"80","endLine":105,"endColumn":65},{"ruleId":"78","severity":1,"message":"79","line":117,"column":21,"nodeType":"80","endLine":117,"endColumn":69},{"ruleId":"78","severity":1,"message":"79","line":128,"column":21,"nodeType":"80","endLine":128,"endColumn":63},{"ruleId":"78","severity":1,"message":"79","line":140,"column":23,"nodeType":"80","endLine":140,"endColumn":69},{"ruleId":"78","severity":1,"message":"79","line":153,"column":23,"nodeType":"80","endLine":153,"endColumn":66},{"ruleId":"78","severity":1,"message":"79","line":166,"column":23,"nodeType":"80","endLine":166,"endColumn":68},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Picture' is defined but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation"]