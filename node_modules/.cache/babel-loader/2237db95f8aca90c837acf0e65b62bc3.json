{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Projects\\\\Website\\\\knowledge-base\\\\src\\\\pages\\\\articles\\\\Article_02_01132021.js\";\nimport \"../css/Articles.css\";\nimport { IoMdReturnLeft } from \"react-icons/io\";\nimport HeroImg from \"./img/compass.png\";\n\nfunction Article() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"article-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-header\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"navbar-title\",\n          href: \"/\",\n          children: \"Knowledge Base\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-collapse\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/\",\n              children: \"About\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"\",\n              children: \"GameDev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"back\",\n              children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"back-text\",\n                href: \"/\",\n                children: \"Back to Articles\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"back-icon\",\n                href: \"/\",\n                children: /*#__PURE__*/_jsxDEV(IoMdReturnLeft, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 35,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"article\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hero-img\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: HeroImg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"article-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"article-title\",\n                  children: \"Using git without the command line\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"author-n-date\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \"Cole Pergerson\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \"Date 01/13/2021\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 53,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-text\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"p-indent\",\n                  children: \"This is a guide on how to use git without touching the command line. Basically you\\u2019ll be pressing buttons instead of writing commands. This guide was created to promote the use of git for version and source code control while also providing an easy alternative to the command line.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Please note that if you\\u2019re planning to go into an industry that uses git, then we highly recommend that you learn how to use git in the command line as it will give you a more complete understanding of the tool.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Below is the list of tools that will be covered. This list isn\\u2019t exhaustive as there are alternatives to each of these tools.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                    children: \"GitHub Desktop\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 21\n                  }, this), \"A friendly UI that provides a visual process for most of the git commands. Documentation: https://docs.github.com/en/desktop\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                    children: \"Visual Code (or Atom)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 84,\n                    columnNumber: 21\n                  }, this), \"A lightweight code editor that has visual merge conflict tools. If GitHub Desktop encounters a merge conflict, then you can open the conflicted file with Visual Code and resolve conflicts. Documentation: https://code.visualstudio.com/docs/editor/versioncontrol\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-text\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  className: \"article-heading\",\n                  children: \"Setup\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"p-indent\",\n                  children: \"Install GitHub Desktop and Visual Code. Make sure that the editor for GitHub Desktop is set to Visual Code. Click here for help\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-text\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  className: \"article-heading\",\n                  children: \"Using GitHub Desktop\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"article-heading\",\n                  children: \"What is Git and GitHub?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"p-indent\",\n                  children: \"Git is a version control tool, meaning that it keeps track of all the versions of your project. At any time, you can restore older parts of your project if you break your current version. GitHub is a site that will allow you to upload your git project to their cloud servers. Your code will be online and others can collaborate with you remotely. When you download GitHub Desktop, it will automatically download git on to your computer.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Git:https://git-scm.com/ \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 46\n                  }, this), \"GitHub: https://github.com/features\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"There are some git concepts that you should know. Commits are the different versions of your project. It\\u2019s up to you how many updates a single commit will have, you'll know more about that later. Whenever you see \\u201CCommit your changes,\\u201D that means creating a commit. Git allows other people to work together on the same project using branches. These are separate safe zones that can be created and worked in without affecting other branches. Each branch contains their own commits and to get commits from another branch, you\\u2019ll need to merge the branches.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"GitHub has some concepts that may be confusing. First, projects are called repositories. Pushing means uploading and Pulling means downloading. The Origin means the repository stored in the cloud. You will be pulling commits from the origin and pushing your commits to the origin.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"article-heading\",\n                  children: \"I\\u2019m the host of the project\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Whoever has started the project will need to upload the files to GitHub. You can do this through the desktop application via two ways\", /*#__PURE__*/_jsxDEV(\"ol\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                      children: /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: \"Make the local repository, then save the project file the repo file location.\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 146,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 145,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: \"Make the project first, then create the local repository.\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 152,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 151,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Click File \\u2192 New repository. A window will appear where you can name your repo and choose your local installation location. Look to see if there is a .gitignore file for your editor. There is one for Unity and Unreal. The .gitignore tells git to ignore files that don\\u2019t need to be shared to other users and makes collaborating easier.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"If you followed process 1, then go to your editor and save your project to the newly created repo folder. If you followed process 2, then drag your project file into the repo folder.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"One those steps are created, you should see changes recorded in GitHub Desktop (Fig. 2). If you\\u2019re using Unity, check \\u201CNote for Unity\\u201D below first. When you\\u2019re ready, write a summary of the changes, \\u201CUploaded project\\u201D is fine. Then press commit changes.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Note for Unity\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 35\n                  }, this), \"There are two things to know.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"First, make sure the whole team is using the same version of Unity. If you all have different versions, then you\\u2019ll experience issues in Git syncing.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Second, the default gitignore for Unity usually doesn\\u2019t work. If your project is stored in a subfolder in the repo folder, then GitHub Desktop will most likely show over a 100 changes (Fig. 1). Since this is a new project, you should have less than 30 changes (Fig. 2). This is because your .gitignore is assuming the project is in the root folder, not in a folder within the root folder. Edit the .gitignore by removing the \\u2018/\\u2019 in front of the file directories listed at the top of the file. See images below\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                  children: \"Publishing Repo\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 19\n                }, this), \"Now publish the repository if you haven\\u2019t done it already. You should see that option as one of the buttons on the top. Once you publish the repo, you might have another option called \\u201CPush Origin.\\u201D Go ahead and press that too, look at the \\u201CUploading Changes\\u201D section below for more details on that.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"This requires that you have a GitHub account. Click here for help\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                  children: \"Inviting your team to collaborate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 19\n                }, this), \"It\\u2019s important that everyone who will be collaborating on this project has a GitHub account. The repo that you have created is hosted on GitHub which takes care of the online syncing. The next important thing is that each member is invited to collaborate on the project. Anyone can download the repository you have uploaded, but they don\\u2019t have permission to make edits until they are official collaborators\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"This is the setting page of a GitHub repo (Fig. 3). Under \\u2018Manage access,\\u2019 you can see there are three collaborators for this project, and only these three people and the repo owner can make edits.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"A \", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"common problem\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 21\n                }, this), \" is that the repo owner will forget to invite someone and then a team member will try to add their changes. They will be prompted with a window asking if they would like to create a fork which is basically an exact, but separate, clone of the repo. This is super confusing for anyone not familiar with GitHub, but luckily it\\u2019s an easy problem to fix.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"article-heading\",\n                children: \"I\\u2019m trying to join the project\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"If you haven\\u2019t already, create a GitHub account. Send your GitHub username to whoever is the host of the project. It\\u2019s very important that you\\u2019re a collaborator of the GitHub repository. GitHub is a site that hosts projects that are using git for version and source code control. A repository is the name of a project hosted on GitHub. There are millions of public repositories on GitHub that you can view and download, but you can\\u2019t make edits to them unless you're a collaborator from them. The repo host must invite you to be a collaborator, otherwise, when you try to make edits, GitHub desktop will say you don\\u2019t have permission and will ask you to create a fork.\", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Don\\u2019t create a fork\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 19\n                }, this), \", a fork is an exact, but separate, verison of the repo. Basically, you\\u2019ll be making changes to the wrong project!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"To download a version of the project, you\\u2019ll need to clone the project. When you see or hear clone, just think of downloading the project.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"There are two ways to do this.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 47\n                }, this), \"Clone from GitHub desktop\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 26\n                }, this), \"Clone from GitHub.com\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Clone the project, choose where you want to store it, and then open the project.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"article-heading\",\n                children: \"Uploading Changes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Git automatically your records changes and GitHub Desktop will list them under the Changes tab. In Figure 4, there are 26 changes that git sees. You can simply commit these changes, which is git's way of saying that these changes are good and ready to be sent to everyone else. To commit, simply add a comment and press the blue button at the button. Click here for a more detailed explanation. Then you have one more step, which is to push those changes.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Pushing changes will upload them to the GitHub repo for everyone else to download. Once you committed, you should see a button at the top that will say \\u201CPush Origin.\\u201D There will be number in that button which will tell you how many commits you\\u2019ll be pushing. Simply push the Push button to share your changes.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"article-heading\",\n                children: \"Working with others\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"You now know how to upload changes, but how do you upload changes that don\\u2019t conflict with your teammate\\u2019s work? This scenario is definitely possible and could lead to loss of work and time trying to resolve git conflicts. That is why you must use branches!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                  children: \"Setting up a branch\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 43\n                }, this), \"Branches are like seperate spaces with the repo that you can freely edit from the main project. In fact, the main project is a branch! It is called master and that is the root of the project. It\\u2019s a best practice to have everyone one there own branches and then merge those changes to master. This way each member doesn\\u2019t have to worry about messing with other people's changes and if there is a conflict, it happens at one place independent of all the other branches. This way you won\\u2019t lose work by bringing changes together.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Click here for a detailed guide to branches\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"article-heading\",\n                children: \"Merging changes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Once everyone is working on their own branch, there will be a point where all those changes need to come together to update the game. You can bring changes from one branch into another by merging them.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                  children: \"Merging branches\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 40\n                }, this), \"Select the branch that you want to bring changes into. Goto Branch \\u2192 \\u2018Merge into current branch\\u2026\\u2019 A window will appear\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"In figure 5, my selected branch is master, the main project, which has a check mark next to it. Here I want to bring the changes from the coding branch into master to update the game. As you can see at the bottom, GitHub Desktop is telling me exactly what this operation is going to do. \\u201CThis will merge 65 commits from code into master.\\u201D It is really important that you read and trust what is said before merging.  Click merge, it is that easy!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Click here for a, somewhat, detailed guide to merging\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                  children: \"Resolving merge conflicts in GitHub Desktop\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 67\n                }, this), \"Sometimes it isn\\u2019t very easy because there may be merge conflicts. You\\u2019ll know because GitHub Desktop will tell you beforehand (Fig. 6).\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Everything is fine..O_O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Click merge the button, don\\u2019t worry, you can abort the merge at any time. Another window will appear detailing all the merge conflicts (Fig. 7). As you can see, the commit merge button is greyed out but the abort merge is readily available to be pressed. Merge conflicts are conflicts in the file that git has decided that it is best for us, humans, to resolve. In this case, there is only one issue that needs to be fixed. There is an option to open in Visual Studio, but that will be explained later in this document. Instead, we will solve this using GitHub desktop by clicking the arrow point down. There will be some options, but the two bottom ones are what we will be focusing on. Use the modified changes from X or you use the modified changes from Y. X and Y are the two branches involved in this conflict. Basically, do you want to override the conflict with your changes or with their changes. It\\u2019s one or the other, and in most cases, this is the easiest and best choice to make. Of course you have to sacrifice someone\\u2019s work, which in most cases, isn\\u2019t too bad.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"article-heading\",\n                children: \"Using Visual Code to solve merge conflicts\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Let\\u2019s come back to this example. As you can see (Fig. 8), one of the options is to \\u201COpen in Visual Studio Code.\\u201D Go ahead and press the button, Visual Studio Code will open up. Usually Visual Code will detect git in the system and open the conflicted file.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"You should see the conflicted file once it opens and on the left, you\\u2019ll see a branch symbol (Fig. 9). Click that and the source control window will open up.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"In Visual Studio Code, you\\u2019ll have all the same options in GitHub Desktop plus some more helpful tools which I will show you.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"You can right click any of the files and resolve the conflict by selecting the incoming changes or the current ones (Fig. 10)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Another way to resolve conflicts is by going directly in the code. In this example, I have a conflict at the variable speed (Fig. 11).\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"article-img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-full\",\n                  src: HeroImg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"The green code is the current changes, the changes on the current branch. The blue code is the incoming change, the changes from the other branch. I can either click the buttons on the top, or I can directly edit the code. When there is a merge conflict, Git adds the code from both branches into the conflicted files and separates them with the '&lt &lt &lt' and \\u201C===\\u201D symbols. Visual Studio is handy because it will highlight them to make them easier to find. In some cases, you might want both branch changes so directly editing the code would be the best option.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"article-text\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"article-heading\",\n                children: \"Our Best Practices\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"article-heading\",\n                children: \"Learn git command line :)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"I highly recommend learning git command line because that will give you a better understanding of everything I went over. If not, you always will be limited to the option of GitHub Desktop and you\\u2019ll be hopeless in any deveasting merge conflicts (this is rare, but happens). Assuming you\\u2019re a student at San Jose State University, you have free access to Lynda.com with your library card. There are some great courses on that site that cover git command line and you\\u2019ll be more confident in using Git after watching them.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"article-heading\",\n                children: \"Branches\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Work in separate branches! You can either name your branches after your teammate names or discipline. It\\u2019s best, however, to name them after features or parts of your game. Usually I use a mixture of these. I might have the player branch, which is for player related code, and then I\\u2019ll have the art branch, where my artist can upload all of their assets to. It really depends on what is best for your team.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Always keep the master branch working! When it comes to merging everyone\\u2019s changes together, don\\u2019t merge them into master yet. Have a separate branch for that where you can merge all the changes at once, resolve any conflicts, and then merge that branch into master. By keeping the master branch clean. You\\u2019ll always have, ideally, a playable game that you could send off for playtesting.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"print-menu\",\n              children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"print-link\",\n                href: \"\",\n                children: \"Print Article\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n                className: \"line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"article-types\",\n                href: \"/\",\n                children: \"tutorials\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"article-tags\",\n                children: \" Tags: #tag #tag #tag #tag #tag\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Article;\nexport default Article;\n\nvar _c;\n\n$RefreshReg$(_c, \"Article\");","map":{"version":3,"sources":["D:/Projects/Website/knowledge-base/src/pages/articles/Article_02_01132021.js"],"names":["IoMdReturnLeft","HeroImg","Article"],"mappings":";;AAAA,OAAO,qBAAP;AACA,SAASA,cAAT,QAA+B,gBAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,SAASC,OAAT,GAAmB;AACjB,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,cAAb;AAA4B,UAAA,IAAI,EAAC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE;AAAA,kCACE;AAAA,mCACE;AAAG,cAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAA,mCACE;AAAG,cAAA,IAAI,EAAC,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAmBE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,sCACE;AAAG,gBAAA,SAAS,EAAC,WAAb;AAAyB,gBAAA,IAAI,EAAC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE;AAAG,gBAAA,SAAS,EAAC,WAAb;AAAyB,gBAAA,IAAI,EAAC,GAA9B;AAAA,uCACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAcE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,UAAf;AAAA,qCACE;AAAK,gBAAA,GAAG,EAAED;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAK,cAAA,SAAS,EAAC,mBAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC,gBAAf;AAAA,wCACE;AAAI,kBAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAIE;AAAK,kBAAA,SAAS,EAAC,eAAf;AAAA,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAWE;AAAK,gBAAA,SAAS,EAAC,cAAf;AAAA,wCACE;AAAG,kBAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAdF,eAmBE;AAAA,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAnBF,eAyBE;AAAA,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXF,eA8CE;AAAK,gBAAA,SAAS,EAAC,cAAf;AAAA,wCACE;AAAI,kBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAG,kBAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBA9CF,eAuDE;AAAK,gBAAA,SAAS,EAAC,cAAf;AAAA,wCACE;AAAI,kBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAI,kBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,eAGE;AAAG,kBAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,eAaE;AAAA,uEAC2B;AAAA;AAAA;AAAA;AAAA,0BAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,wBAbF,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAjBF,eA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA7BF,eAoCE;AAAI,kBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBApCF,eAuCE;AAAA,mLAIE;AAAA,4CACE;AAAA,6CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,4BADF,eAOE;AAAA,6CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,4BAPF;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAvCF,eA0DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA1DF,eAkEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAlEF,eAwEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAxEF,eA+EE;AAAA,4DACgB;AAAA;AAAA;AAAA;AAAA,0BADhB;AAAA;AAAA;AAAA;AAAA;AAAA,wBA/EF,eAmFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAnFF,eAwFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAxFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvDF,eA2JE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA3JF,eA8JE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA9JF,eAiKE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAjKF,eAqKE;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBArKF,eA8KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA9KF,eAkLE;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlLF,eA8LE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA9LF,eAkME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlMF,eAwME;AAAA,8CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAxMF,eAiNE;AAAI,gBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAjNF,eAoNE;AAAA,iuBAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,sBApNF,eAoOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBApOF,eAuOE;AAAA,0EAC8B;AAAA;AAAA;AAAA;AAAA,wBAD9B,4CAES;AAAA;AAAA;AAAA;AAAA,wBAFT;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvOF,eA4OE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5OF,eA+OE;AAAI,gBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA/OF,eAkPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlPF,eAuPE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAvPF,eA2PE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA3PF,eAgQE;AAAI,gBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhQF,eAmQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnQF,eAsQE;AAAA,wCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,eAC0B;AAAA;AAAA;AAAA;AAAA,wBAD1B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtQF,eA4QE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5QF,eA6QE;AAAI,gBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA7QF,eAgRE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhRF,eAmRE;AAAA,wCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,eACuB;AAAA;AAAA;AAAA;AAAA,wBADvB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnRF,eAuRE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAvRF,eA0RE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA1RF,eA6RE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA7RF,eAgSE;AAAA,wCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,eACkD;AAAA;AAAA;AAAA;AAAA,wBADlD;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhSF,eAsSE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAtSF,eA0SE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA1SF,eA2SE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA3SF,eA+SE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA/SF,eAmTE;AAAI,gBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnTF,eAsTE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtTF,eAyTE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAzTF,eA4TE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA5TF,eAgUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhUF,eAmUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnUF,eAsUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtUF,eAyUE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAzUF,eA4UE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5UF,eA+UE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAA0B,kBAAA,GAAG,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA/UF,eAkVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlVF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eA2VE;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,sCACE;AAAI,gBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAI,gBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF,eAME;AAAI,gBAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,oBA3VF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAdF,eA2XE;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,sCACE;AAAG,gBAAA,SAAS,EAAC,YAAb;AAA0B,gBAAA,IAAI,EAAC,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE;AAAI,gBAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,sBAJF,eAKE;AAAG,gBAAA,SAAS,EAAC,eAAb;AAA6B,gBAAA,IAAI,EAAC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,eAQE;AAAG,gBAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBA3XF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkaD;;KAnaQC,O;AAqaT,eAAeA,OAAf","sourcesContent":["import \"../css/Articles.css\";\r\nimport { IoMdReturnLeft } from \"react-icons/io\";\r\nimport HeroImg from \"./img/compass.png\";\r\n\r\nfunction Article() {\r\n  return (\r\n    <div className=\"article-page\">\r\n      <div className=\"navbar\">\r\n        <div className=\"navbar-header\">\r\n          <a className=\"navbar-title\" href=\"/\">\r\n            Knowledge Base\r\n          </a>\r\n        </div>\r\n        <div className=\"navbar-collapse\">\r\n          <ul>\r\n            <li>\r\n              <a href=\"/\">About</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"\">GameDev</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"page-body\">\r\n        <div className=\"page-grid\">\r\n          <div className=\"left\">\r\n            <div className=\"content\">\r\n              <div className=\"back\">\r\n                <a className=\"back-text\" href=\"/\">\r\n                  Back to Articles\r\n                </a>\r\n                <a className=\"back-icon\" href=\"/\">\r\n                  <IoMdReturnLeft />\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"center\">\r\n            <div className=\"article\">\r\n              <div className=\"hero-img\">\r\n                <img src={HeroImg}></img>\r\n              </div>\r\n              <div className=\"article-container\">\r\n                <div className=\"article-header\">\r\n                  <h1 className=\"article-title\">\r\n                    Using git without the command line\r\n                  </h1>\r\n                  <div className=\"author-n-date\">\r\n                    <h3>Cole Pergerson</h3>\r\n                    <h3>Date 01/13/2021</h3>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"article-text\">\r\n                  <p className=\"p-indent\">\r\n                    This is a guide on how to use git without touching the\r\n                    command line. Basically you’ll be pressing buttons instead\r\n                    of writing commands. This guide was created to promote the\r\n                    use of git for version and source code control while also\r\n                    providing an easy alternative to the command line.\r\n                  </p>\r\n                  <p>\r\n                    Please note that if you’re planning to go into an industry\r\n                    that uses git, then we highly recommend that you learn how\r\n                    to use git in the command line as it will give you a more\r\n                    complete understanding of the tool.\r\n                  </p>\r\n                  <p>\r\n                    Below is the list of tools that will be covered. This list\r\n                    isn’t exhaustive as there are alternatives to each of these\r\n                    tools.\r\n                  </p>\r\n                  <p>\r\n                    <u>GitHub Desktop</u>\r\n                    <br></br>A friendly UI that provides a visual process for\r\n                    most of the git commands. Documentation:\r\n                    https://docs.github.com/en/desktop\r\n                  </p>\r\n                  <p>\r\n                    <u>Visual Code (or Atom)</u>\r\n                    <br></br>A lightweight code editor that has visual merge\r\n                    conflict tools. If GitHub Desktop encounters a merge\r\n                    conflict, then you can open the conflicted file with Visual\r\n                    Code and resolve conflicts. Documentation:\r\n                    https://code.visualstudio.com/docs/editor/versioncontrol\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"article-text\">\r\n                  <h2 className=\"article-heading\">Setup</h2>\r\n                  <p className=\"p-indent\">\r\n                    Install GitHub Desktop and Visual Code. Make sure that the\r\n                    editor for GitHub Desktop is set to Visual Code. Click here\r\n                    for help\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"article-text\">\r\n                  <h2 className=\"article-heading\">Using GitHub Desktop</h2>\r\n                  <h3 className=\"article-heading\">What is Git and GitHub?</h3>\r\n                  <p className=\"p-indent\">\r\n                    Git is a version control tool, meaning that it keeps track\r\n                    of all the versions of your project. At any time, you can\r\n                    restore older parts of your project if you break your\r\n                    current version. GitHub is a site that will allow you to\r\n                    upload your git project to their cloud servers. Your code\r\n                    will be online and others can collaborate with you remotely.\r\n                    When you download GitHub Desktop, it will automatically\r\n                    download git on to your computer.\r\n                  </p>\r\n                  <p>\r\n                    Git:https://git-scm.com/ <br></br>\r\n                    GitHub: https://github.com/features\r\n                  </p>\r\n                  <p>\r\n                    There are some git concepts that you should know. Commits\r\n                    are the different versions of your project. It’s up to you\r\n                    how many updates a single commit will have, you'll know more\r\n                    about that later. Whenever you see “Commit your changes,”\r\n                    that means creating a commit. Git allows other people to\r\n                    work together on the same project using branches. These are\r\n                    separate safe zones that can be created and worked in\r\n                    without affecting other branches. Each branch contains their\r\n                    own commits and to get commits from another branch, you’ll\r\n                    need to merge the branches.\r\n                  </p>\r\n                  <p>\r\n                    GitHub has some concepts that may be confusing. First,\r\n                    projects are called repositories. Pushing means uploading\r\n                    and Pulling means downloading. The Origin means the\r\n                    repository stored in the cloud. You will be pulling commits\r\n                    from the origin and pushing your commits to the origin.\r\n                  </p>\r\n                  <h3 className=\"article-heading\">\r\n                    I’m the host of the project\r\n                  </h3>\r\n                  <p>\r\n                    Whoever has started the project will need to upload the\r\n                    files to GitHub. You can do this through the desktop\r\n                    application via two ways\r\n                    <ol>\r\n                      <li>\r\n                        <p>\r\n                          Make the local repository, then save the project file\r\n                          the repo file location.\r\n                        </p>\r\n                      </li>\r\n                      <li>\r\n                        <p>\r\n                          Make the project first, then create the local\r\n                          repository.\r\n                        </p>\r\n                      </li>\r\n                    </ol>\r\n                  </p>\r\n                  <p>\r\n                    Click File → New repository. A window will appear where you\r\n                    can name your repo and choose your local installation\r\n                    location. Look to see if there is a .gitignore file for your\r\n                    editor. There is one for Unity and Unreal. The .gitignore\r\n                    tells git to ignore files that don’t need to be shared to\r\n                    other users and makes collaborating easier.\r\n                  </p>\r\n                  <p>\r\n                    If you followed process 1, then go to your editor and save\r\n                    your project to the newly created repo folder. If you\r\n                    followed process 2, then drag your project file into the\r\n                    repo folder.\r\n                  </p>\r\n                  <p>\r\n                    One those steps are created, you should see changes recorded\r\n                    in GitHub Desktop (Fig. 2). If you’re using Unity, check\r\n                    “Note for Unity” below first. When you’re ready, write a\r\n                    summary of the changes, “Uploaded project” is fine. Then\r\n                    press commit changes.\r\n                  </p>\r\n                  <p>\r\n                    Note for Unity<br></br>\r\n                    There are two things to know.\r\n                  </p>\r\n                  <p>\r\n                    First, make sure the whole team is using the same version of\r\n                    Unity. If you all have different versions, then you’ll\r\n                    experience issues in Git syncing.\r\n                  </p>\r\n                  <p>\r\n                    Second, the default gitignore for Unity usually doesn’t\r\n                    work. If your project is stored in a subfolder in the repo\r\n                    folder, then GitHub Desktop will most likely show over a 100\r\n                    changes (Fig. 1). Since this is a new project, you should\r\n                    have less than 30 changes (Fig. 2). This is because your\r\n                    .gitignore is assuming the project is in the root folder,\r\n                    not in a folder within the root folder. Edit the .gitignore\r\n                    by removing the ‘/’ in front of the file directories listed\r\n                    at the top of the file. See images below\r\n                  </p>\r\n                </div>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n\r\n                <p>\r\n                  <u>Publishing Repo</u>\r\n                  <br></br>\r\n                  Now publish the repository if you haven’t done it already. You\r\n                  should see that option as one of the buttons on the top. Once\r\n                  you publish the repo, you might have another option called\r\n                  “Push Origin.” Go ahead and press that too, look at the\r\n                  “Uploading Changes” section below for more details on that.\r\n                </p>\r\n                <p>\r\n                  This requires that you have a GitHub account. Click here for\r\n                  help\r\n                </p>\r\n                <p>\r\n                  <u>Inviting your team to collaborate</u>\r\n                  <br></br>\r\n                  It’s important that everyone who will be collaborating on this\r\n                  project has a GitHub account. The repo that you have created\r\n                  is hosted on GitHub which takes care of the online syncing.\r\n                  The next important thing is that each member is invited to\r\n                  collaborate on the project. Anyone can download the repository\r\n                  you have uploaded, but they don’t have permission to make\r\n                  edits until they are official collaborators\r\n                </p>\r\n\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n\r\n                <p>\r\n                  This is the setting page of a GitHub repo (Fig. 3). Under\r\n                  ‘Manage access,’ you can see there are three collaborators for\r\n                  this project, and only these three people and the repo owner\r\n                  can make edits.\r\n                </p>\r\n                <p>\r\n                  A <b>common problem</b> is that the repo owner will forget to\r\n                  invite someone and then a team member will try to add their\r\n                  changes. They will be prompted with a window asking if they\r\n                  would like to create a fork which is basically an exact, but\r\n                  separate, clone of the repo. This is super confusing for\r\n                  anyone not familiar with GitHub, but luckily it’s an easy\r\n                  problem to fix.\r\n                </p>\r\n                <h3 className=\"article-heading\">\r\n                  I’m trying to join the project\r\n                </h3>\r\n                <p>\r\n                  If you haven’t already, create a GitHub account. Send your\r\n                  GitHub username to whoever is the host of the project. It’s\r\n                  very important that you’re a collaborator of the GitHub\r\n                  repository. GitHub is a site that hosts projects that are\r\n                  using git for version and source code control. A repository is\r\n                  the name of a project hosted on GitHub. There are millions of\r\n                  public repositories on GitHub that you can view and download,\r\n                  but you can’t make edits to them unless you're a collaborator\r\n                  from them. The repo host must invite you to be a collaborator,\r\n                  otherwise, when you try to make edits, GitHub desktop will say\r\n                  you don’t have permission and will ask you to create a fork.\r\n                  <b>Don’t create a fork</b>, a fork is an exact, but separate, verison\r\n                  of the repo. Basically, you’ll be making changes to the wrong\r\n                  project!\r\n                </p>\r\n                <p>\r\n                To download a version of the project, you’ll need to clone the project. When you see or hear clone, just think of downloading the project. \r\n                </p>\r\n                <p>\r\n                There are two ways to do this.<br></br>\r\nClone from GitHub desktop<br></br>\r\nClone from GitHub.com\r\n                </p>\r\n                <p>\r\n                Clone the project, choose where you want to store it, and then open the project.\r\n                </p>\r\n                <h3 className=\"article-heading\">\r\n                  Uploading Changes\r\n                </h3>\r\n                <p>\r\n                Git automatically your records changes and GitHub Desktop will list them under the Changes tab. In Figure 4, there are 26 changes that git sees. You can simply commit these changes, which is git's way of saying that these changes are good and ready to be sent to everyone else. To commit, simply add a comment and press the blue button at the button. Click here for a more detailed explanation. Then you have one more step, which is to push those changes.\r\n\r\n                </p>\r\n\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n\r\n                <p>\r\n                Pushing changes will upload them to the GitHub repo for everyone else to download. Once you committed, you should see a button at the top that will say “Push Origin.” There will be number in that button which will tell you how many commits you’ll be pushing.\r\n                Simply push the Push button to share your changes.\r\n                </p>\r\n\r\n                <h3 className=\"article-heading\">\r\n                Working with others\r\n                </h3>\r\n                <p>\r\n                You now know how to upload changes, but how do you upload changes that don’t conflict with your teammate’s work? This scenario is definitely possible and could lead to loss of work and time trying to resolve git conflicts. That is why you must use branches!\r\n                </p>\r\n                <p>\r\n                <u>Setting up a branch</u><br></br>\r\n\r\nBranches are like seperate spaces with the repo that you can freely edit from the main project. In fact, the main project is a branch! It is called master and that is the root of the project. It’s a best practice to have everyone one there own branches and then merge those changes to master. This way each member doesn’t have to worry about messing with other people's changes and if there is a conflict, it happens at one place independent of all the other branches. This way you won’t lose work by bringing changes together. \r\n\r\n                </p>\r\n                <p>Click here for a detailed guide to branches</p>\r\n                <h3 className=\"article-heading\">\r\n                Merging changes\r\n                </h3>\r\n                <p>\r\n                Once everyone is working on their own branch, there will be a point where all those changes need to come together to update the game. You can bring changes from one branch into another by merging them.\r\n                </p>\r\n                <p>\r\n                <u>Merging branches</u><br></br>\r\nSelect the branch that you want to bring changes into. Goto Branch → ‘Merge into current branch…’ A window will appear \r\n                </p>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n                <p>\r\n                In figure 5, my selected branch is master, the main project, which has a check mark next to it. Here I want to bring the changes from the coding branch into master to update the game. As you can see at the bottom, GitHub Desktop is telling me exactly what this operation is going to do. “This will merge 65 commits from code into master.” It is really important that you read and trust what is said before merging.  Click merge, it is that easy!\r\n                </p>\r\n                <p>\r\n                Click here for a, somewhat, detailed guide to merging\r\n                </p>\r\n                <p>\r\n                <u>Resolving merge conflicts in GitHub Desktop</u><br></br>\r\n\r\nSometimes it isn’t very easy because there may be merge conflicts. You’ll know because GitHub Desktop will tell you beforehand (Fig. 6). \r\n\r\n                </p>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n\r\n                <p>Everything is fine..O_O</p>\r\n                <p>\r\n                Click merge the button, don’t worry, you can abort the merge at any time. Another window will appear detailing all the merge conflicts (Fig. 7). As you can see, the commit merge button is greyed out but the abort merge is readily available to be pressed. Merge conflicts are conflicts in the file that git has decided that it is best for us, humans, to resolve. In this case, there is only one issue that needs to be fixed. There is an option to open in Visual Studio, but that will be explained later in this document. Instead, we will solve this using GitHub desktop by clicking the arrow point down. There will be some options, but the two bottom ones are what we will be focusing on. Use the modified changes from X or you use the modified changes from Y. X and Y are the two branches involved in this conflict. Basically, do you want to override the conflict with your changes or with their changes. It’s one or the other, and in most cases, this is the easiest and best choice to make. Of course you have to sacrifice someone’s work, which in most cases, isn’t too bad. \r\n                </p>\r\n\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n\r\n                <h3 className=\"article-heading\">\r\n                Using Visual Code to solve merge conflicts\r\n                </h3>\r\n                <p>\r\n                Let’s come back to this example. As you can see (Fig. 8), one of the options is to “Open in Visual Studio Code.” Go ahead and press the button, Visual Studio Code will open up. Usually Visual Code will detect git in the system and open the conflicted file. \r\n                </p>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n\r\n                <p>\r\n                You should see the conflicted file once it opens and on the left, you’ll see a branch symbol (Fig. 9). Click that and the source control window will open up. \r\n                </p>\r\n                <p>\r\n                In Visual Studio Code, you’ll have all the same options in GitHub Desktop plus some more helpful tools which I will show you. \r\n                </p>\r\n                <p>\r\n                You can right click any of the files and resolve the conflict by selecting the incoming changes or the current ones (Fig. 10)\r\n                </p>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n                <p>\r\n                Another way to resolve conflicts is by going directly in the code. In this example, I have a conflict at the variable speed (Fig. 11).\r\n                </p>\r\n                <div className=\"article-img\">\r\n                  <img className=\"img-full\" src={HeroImg}></img>\r\n                </div>\r\n                <p>\r\n                The green code is the current changes, the changes on the current branch. The blue code is the incoming change, the changes from the other branch. I can either click the buttons on the top, or I can directly edit the code. When there is a merge conflict, Git adds the code from both branches into the conflicted files and separates them with the '&lt &lt &lt' and “===” symbols. Visual Studio is handy because it will highlight them to make them easier to find. In some cases, you might want both branch changes so directly editing the code would be the best option.  \r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"article-text\">\r\n                <h2 className=\"article-heading\">Our Best Practices</h2>\r\n                <h3 className=\"article-heading\">Learn git command line :)</h3>\r\n                <p>\r\n                I highly recommend learning git command line because that will give you a better understanding of everything I went over. If not, you always will be limited to the option of GitHub Desktop and you’ll be hopeless in any deveasting merge conflicts (this is rare, but happens). Assuming you’re a student at San Jose State University, you have free access to Lynda.com with your library card. There are some great courses on that site that cover git command line and you’ll be more confident in using Git after watching them.\r\n                </p>\r\n                <h3 className=\"article-heading\">Branches</h3>\r\n                <p>\r\n                Work in separate branches! You can either name your branches after your teammate names or discipline. It’s best, however, to name them after features or parts of your game. Usually I use a mixture of these. I might have the player branch, which is for player related code, and then I’ll have the art branch, where my artist can upload all of their assets to. It really depends on what is best for your team. \r\n                </p>\r\n                <p>\r\n                Always keep the master branch working! When it comes to merging everyone’s changes together, don’t merge them into master yet. Have a separate branch for that where you can merge all the changes at once, resolve any conflicts, and then merge that branch into master. By keeping the master branch clean. You’ll always have, ideally, a playable game that you could send off for playtesting. \r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"right\">\r\n            <div className=\"content\">\r\n              <div className=\"print-menu\">\r\n                <a className=\"print-link\" href=\"\">\r\n                  Print Article\r\n                </a>\r\n                <hr className=\"line\"></hr>\r\n                <a className=\"article-types\" href=\"/\">\r\n                  tutorials\r\n                </a>\r\n                <p className=\"article-tags\"> Tags: #tag #tag #tag #tag #tag</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Article;\r\n"]},"metadata":{},"sourceType":"module"}